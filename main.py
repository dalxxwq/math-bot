import telebot
import pickle
from telebot import types
from made_pictures import create_equation
from database import API_TOKEN, equation

bot = telebot.TeleBot(API_TOKEN)


# –í—ñ–¥–ø—Ä–∞–≤–ª—è—î –≤—ñ—Ç–∞–Ω–Ω—è –ö –ø—Ä–∏ –∫–æ–º–∞–Ω–¥—ñ start –∞–±–æ help
@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    username = message.from_user.first_name
    keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    btn_test = types.KeyboardButton("–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—ÇüßÆ")
    btn_stop = types.KeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç–∏üõë")
    keyboard.add(btn_test, btn_stop)
    bot.send_message(message.chat.id,
                     f"–ü—Ä–∏–≤—ñ—Ç {username}, —è —Å—Ç–≤–æ—Ä–µ–Ω–Ω–∏–π –¥–ª—è —Ç–æ–≥–æ —â–æ–± –¥–æ–ø–æ–º–∞–≥–∞—Ç–∏ –≤–∏–≤—á–∞—Ç–∏ –≤–∞–º –º–∞—Ç–µ–º–∞—Ç–∏–∫—É. –Ø –±—É–¥—É –¥–∞–≤–∞—Ç–∏ –ø—Ä–∏–∫–ª–∞–¥–∏ —ñ —Ä—ñ–≤–Ω—è–Ω–Ω—è, –∞ –≤–∞–º —Ç—Ä–µ–±–∞ –ø—Ä–æ—Å—Ç–æ –ø–∏—Å–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –Ω–∏—Ö. "
                     f"–î–∞–≤–∞–π –æ–¥—Ä–∞–∑—É –ø–µ—Ä–µ–π–¥–µ–º–æ –¥–æ —Ç–µ—Å—Ç—É. –£ —Ç–µ–±–µ —î 10 —Ä—ñ–≤–Ω—è–Ω—å, —á–∏–º –±—ñ–ª—å—à–µ —Ç–∏ –ø—Ä–æ–π–¥–µ—à, —Ç–∏–º –±—ñ–ª—å—à–µ —Ç–∏ –∑–º–æ–∂–µ—à. –£–¥–∞—á—ñ!",
                     reply_markup=keyboard)
    bot.register_next_step_handler(message, test_choice)


# –í–∏–±—ñ—Ä —Ä—ñ–≤–Ω—è
@bot.message_handler(func=lambda message: message.text == "–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—ÇüßÆ")
def test_choice(message):
    global is_test_active
    is_test_active = True  # –ü–æ–∑–Ω–∞—á–∏—Ç–∏ —Ç–µ—Å—Ç —è–∫ –∞–∫—Ç–∏–≤–Ω–∏–π
    bot.send_message(message.chat.id, "–Ø–∫—â–æ —Ç–∏ —Ö–æ—á–µ—à –ø—Ä–æ–π—Ç–∏ –º—ñ–π —Ç–µ—Å—Ç, –æ—Å—å —Å–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö —Ä—ñ–≤–Ω—ñ–≤:")
    keyboard = types.InlineKeyboardMarkup()

    for level in range(1):
        btn_level = types.InlineKeyboardButton(f"{level}Ô∏è‚É£ —Ä—ñ–≤–µ–Ω—å", callback_data=f'level{level}')
        keyboard.add(btn_level)

    bot.send_message(message.chat.id, "–í–∏–±–µ—Ä—ñ—Ç—å —Ä—ñ–≤–µ–Ω—å:", reply_markup=keyboard)


# –ü—Ä–∏ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ—Å—Ç—ñ —î –∫–Ω–æ–ø–∫–∞ —Å—Ç–æ–ø
@bot.message_handler(func=lambda message: message.text == "–ó–∞–≤–µ—Ä—à–∏—Ç–∏üõë")
def stop_test(message):
    global is_test_active
    is_test_active = False  # –ü–æ–∑–Ω–∞—á–∏—Ç–∏ —Ç–µ—Å—Ç —è–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏–π
    bot.send_message(message.chat.id, "–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –î—è–∫—É—é –∑–∞ —É—á–∞—Å—Ç—å!")


# –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∑–∞ –≤–∏–±—ñ—Ä –ö
@bot.callback_query_handler(func=lambda call: call.data.startswith('level'))
def handle_level_selection(call):
    global is_test_active, current_level
    if is_test_active:
        level = int(call.data.replace('level', ''))
        current_level = level
        bot.send_message(call.message.chat.id, text=f"–í–∏ –≤–∏–±—Ä–∞–ª–∏ {level} —Ä—ñ–≤–µ–Ω—å!")
        test(call, level)
    else:
        bot.send_message(call.message.chat.id,
                         "–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∞–±–æ —â–µ –Ω–µ —Ä–æ–∑–ø–æ—á–∞—Ç–æ. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—ÇüßÆ' —â–æ–± —Ä–æ–∑–ø–æ—á–∞—Ç–∏ –Ω–æ–≤–∏–π —Ç–µ—Å—Ç.")


# –°–∞–º —Ç–µ—Å—Ç
def test(call, level):
    global number_of_equation, equations_correct_count
    number_of_equation = 0
    equations_correct_count = 0  # –°–∫–∏–¥–∞—Ç–∏ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
    send_equation(call.message, level)


# –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∑–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø—Ä–∏–∫–ª–∞–¥—ñ–≤
def send_equation(message, level):
    global number_of_equation, is_test_active, equations_correct_count
    if not is_test_active:
        return
    if number_of_equation < 50:
        bot.send_message(message.chat.id, text="–û—Å—å —Ç–≤—ñ–π –ø—Ä–∏–∫–ª–∞–¥")
        create_equation(number_of_equation)
        with open("Equation/new_img.png", "rb") as file:
            bot.send_photo(message.chat.id, file)
        bot.register_next_step_handler(message, check_answer, level)
    else:
        bot.send_message(message.chat.id, f"–í—ñ—Ç–∞—é! –¢–∏ –≤–∂–µ –ø—Ä–æ–π—à–æ–≤ –≤—Å—ñ 10 —Ä—ñ–≤–Ω—è–Ω—å —É —Ä—ñ–≤–Ω—ñ {level}.")
        update_progress()


# –ü–µ—Ä–µ–≤—ñ—Ä—è—î –≤—ñ–¥–ø–æ–≤—ñ–¥—å
def check_answer(message, level):
    global number_of_equation, is_test_active, equations_correct_count
    if not is_test_active:
        return
    answer = message.text
    if answer == list(equation.values())[number_of_equation]:
        equations_correct_count += 1
        number_of_equation += 1
        bot.send_message(message.chat.id, "–ú–æ–ª–æ–¥–µ—Ü—å! –ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å.")
        if equations_correct_count == 10:
            bot.send_message(message.chat.id, f"–í—ñ—Ç–∞—é! –¢–∏ –ø—Ä–æ–π—à–æ–≤ –≤—Å—ñ 10 —Ä—ñ–≤–Ω—è–Ω—å —É —Ä—ñ–≤–Ω—ñ {level}.")
            update_progress()
        else:
            send_equation(message, level)
    else:
        bot.send_message(message.chat.id, "–ù–∞–∂–∞–ª—å —Ü–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.")

        send_equation(message, level)


# –ó–±–µ—Ä—ñ–≥–∞—î –ø—Ä–æ–≥—Ä–µ—Å—Å
def update_progress():
    global correct_level
    correct_level += 1
    with open("data_of_progress.txt", "wb") as save:
        pickle.dump(correct_level, save)


bot.polling()
